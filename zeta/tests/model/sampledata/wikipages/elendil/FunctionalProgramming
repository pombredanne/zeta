@ { 'font-family':'tahoma,sans-serif', 'font-size':'100%' }

{{ Toc() }}


= Functional Programming HOWTO =


{{{ Box
# { 'color' : 'blue', 'width' : '20%', 'pos' : 'normal', 'float' : 'right' }
''Author''  :	A. M. Kuchling
''Release'' :	0.31
}}}

(This is a first draft. Please send comments/error reports/suggestions to amk@amk.ca.)

=== Introduction
In this document, we'll take a tour of Python's features suitable for implementing
programs in a functional style. After an introduction to the concepts of functional 
programming, we'll look at language features such as '/iterators'/ and '/generators'/ and relevant library modules such as itertools and functools.

==== Iterators

I'll start by looking at a Python language feature that's an important foundation for 
writing functional-style programs: iterators.

An iterator is an object representing a stream of data; this object returns the data one 
element at a time. A Python iterator must support a method called next() that takes no 
arguments and always returns the next element of the stream. If there are no more elements 
in the stream, ''next()'' must raise the StopIteration exception. Iterators don't have to be finite, though; it's perfectly reasonable to write an iterator that produces an infinite stream of data.

The built-in '/ iter() '/' function takes an arbitrary object and tries to return an iterator that will return the object's contents or elements, raising TypeError if the object doesn't support iteration. 

You can experiment with the iteration interface manually:

// L = [1,2,3]  \\ 
>>> it = iter(L)  \\
>>> print it \\/ L = [1,2,3] // \\
>>> it = iter(L) 
<...iterator object at ... > \\
>>> it.next() \\
1 \\
>>> it.next() \\
2 \\
>>> it.next() \\
3 \\
>>> it.next() \\
Traceback (most recent call last): \\
  File "<stdin>", line 1, in ? \\
StopIteration \\
>>> // \\

Python expects iterable objects in several different contexts, the most important being the '/for '/ statement. In the statement '/for X in Y'/, Y must be an iterator or some object for which iter() can create an iterator. These two statements are equivalent:

{{{ Box
# { 'color' : 'green', 'width' : '20%', 'pos' : 'normal', 'float' : 'none' }
for i in iter(obj): \\
    print i \\

for i in obj: \\
    print i \\

}}}



Iterators can be materialized as lists or tuples by using the '/list()'/ or '/ tuple() '/constructor functions:


>>> L = [1,2,3] \\
>>> iterator = iter(L) \\
>>> t = tuple(iterator) \\
>>> t \\
(1, 2, 3) \\

Sequence unpacking also supports iterators: if you know an iterator will return N elements, you can unpack them into an N-tuple:

>>> L = [1,2,3] \\
>>> iterator = iter(L) \\
>>> a,b,c = iterator \\
>>> a,b,c \\
(1, 2, 3) \\

==== Generator expressions and list comprehensions

Two common operations on an iterator's output are 

# performing some operation for every element, 
# selecting a subset of elements that meet some condition. For example, given a list of strings, you might want to strip off trailing whitespace from each line or extract all the strings containing a given substring.

List comprehensions and generator expressions (short form: "listcomps" and "genexps") are a concise notation for such operations, borrowed from the functional programming language Haskell [[http://www.haskell.org]]. You can strip all the whitespace from a stream of strings with the following code:

{{{ Box
# { 'color' : 'green', 'pos' : 'normal', 'float' : 'none' }
line_list = ['  line 1\n', 'line 2  \n', ...]

~# Generator expression -- returns iterator
stripped_iter = (line.strip() for line in line_list)

~# List comprehension -- returns list
stripped_list = [line.strip() for line in line_list]
}}}

You can select only certain elements by adding an "if" condition:
{{{ Box
# { 'color' : 'green', 'width' : '40%', 'pos' : 'normal', 'float' : 'none' }
stripped_list = [line.strip() for line in line_list
                 if line != ""]
}}}


With a list comprehension, you get back a Python list; stripped_list is a list containing the resulting lines, not an iterator. Generator expressions return an iterator that computes the values as necessary, not needing to materialize all the values at once. This means that list comprehensions aren't useful if you're working with iterators that return an infinite stream or a very large amount of data. Generator expressions are preferable in these situations.

Generator expressions are surrounded by parentheses ("()") and list comprehensions are surrounded by square brackets ("[]"). Generator expressions have the form:

{{{ Box
# { 'color' : 'green', 'width' : '40%', 'pos' : 'normal', 'float' : 'none' }
( expression for expr in sequence1
             if condition1
             for expr2 in sequence2
             if condition2
             for expr3 in sequence3 ...
             if condition3
             for exprN in sequenceN
             if conditionN )

}}}

Again, for a list comprehension only the outside brackets are different (square brackets instead of parentheses).

The elements of the generated output will be the successive values of expression. The if clauses are all optional; if present, expression is only evaluated and added to the result when condition is true.

Generator expressions always have to be written inside parentheses, but the parentheses signalling a function call also count. If you want to create an iterator that will be immediately passed to a function you can write:

// obj_total = sum(obj.count for obj in list_all_objects()) //

The for...in clauses contain the sequences to be iterated over. The sequences do not have to be the same length, because they are iterated over from left to right, not in parallel. For each element in sequence1, sequence2 is looped over from the beginning. sequence3 is then looped over for each resulting pair of elements from sequence1 and sequence2.

To put it another way, a list comprehension or generator expression is equivalent to the following Python code:

for expr1 in sequence1: \\
    if not (condition1): \\
        continue   ~# Skip this element \\
    for expr2 in sequence2: \\
        if not (condition2): \\
            continue    ~# Skip this element \\
        ... \\
        for exprN in sequenceN: \\
             if not (conditionN): \\
                 continue   ~# Skip this element \\

             ~# Output the value of the expression. \\

This means that when there are multiple '/ for...in '/ clauses but no '/ if '/ clauses, the length of the resulting output will be equal to the product of the lengths of all the sequences. If you have two lists of length 3, the output list is 9 elements long:

>>> seq1 = 'abc'
>>> seq2 = (1,2,3)
>>> [(x,y) for x in seq1 for y in seq2]
[('a', 1), ('a', 2), ('a', 3),
 ('b', 1), ('b', 2), ('b', 3),
 ('c', 1), ('c', 2), ('c', 3)]

==== Generators

Generators are a special class of functions that simplify the task of writing iterators. Regular functions compute a value and return it, but generators return an iterator that returns a stream of values.

You're doubtless familiar with how regular function calls work in Python or C. When you call a function, it gets a private namespace where its local variables are created. When the function reaches a return statement, the local variables are destroyed and the value is returned to the caller. A later call to the same function creates a new private namespace and a fresh set of local variables. But, what if the local variables weren't thrown away on exiting a function? What if you could later resume the function where it left off? This is what generators provide; they can be thought of as resumable functions.

Here's the simplest example of a generator function:

def generate_ints(N):
    for i in range(N):
        yield i

Any function containing a yield keyword is a generator function; this is detected by Python's bytecode compiler which compiles the function specially as a result.

When you call a generator function, it doesn't return a single value; instead it returns a generator object that supports the iterator protocol. On executing the yield expression, the generator outputs the value of i, similar to a return statement. The big difference between yield and a return statement is that on reaching a yield the generator's state of execution is suspended and local variables are preserved. On the next call to the generator's .next() method, the function will resume executing.

Here's a sample usage of the generate_ints() generator:

>>> gen = generate_ints(3) \\
>>> gen \\
<generator object at ...> \\
>>> gen.next()\\
0 \\
>>> gen.next() \\
1 \\
>>> gen.next() \\
2 \\
>>> gen.next() \\
Traceback (most recent call last): \\
  File "stdin", line 1, in ? \\
  File "stdin", line 2, in generate_ints \\
StopIteration \\

You could equally write for i in generate_ints(5), or a,b,c = generate_ints(3).

Inside a generator function, the return statement can only be used without a value, and signals the end of the procession of values; after executing a return the generator cannot return any further values. return with a value, such as return 5, is a syntax error inside a generator function. The end of the generator's results can also be indicated by raising StopIteration manually, or by just letting the flow of execution fall off the bottom of the function.

===== Passing values into a generator

In Python 2.4 and earlier, generators only produced output. Once a generator's code was invoked to create an iterator, there was no way to pass any new information into the function when its execution is resumed. You could hack together this ability by making the generator look at a global variable or by passing in some mutable object that callers then modify, but these approaches are messy.

In Python 2.5 there's a simple way to pass values into a generator. yield became an expression, returning a value that can be assigned to a variable or otherwise operated on:

 '/ val = (yield i) '/

I recommend that you always put parentheses around a yield expression when you're doing something with the returned value, as in the above example. The parentheses aren't always necessary, but it's easier to always add them instead of having to remember when they're needed.

(PEP 342 explains the exact rules, which are that a yield-expression must always be parenthesized except when it occurs at the top-level expression on the right-hand side of an assignment. This means you can write val = yield i but have to use parentheses when there's an operation, as in val = (yield i) + 12.)

Values are sent into a generator by calling its send(value) method. This method resumes the generator's code and the yield expression returns the specified value. If the regular next() method is called, the yield returns None.

Here's a simple counter that increments by 1 and allows changing the value of the internal counter.

def counter (maximum): \\
    i = 0 \\
    while i < maximum: \\
        val = (yield i) \\
        ~# If value provided, change counter \\
        if val is not None: \\
            i = val \\
        else: \\
            i += 1 \\

And here's an example of changing the counter:

>>> it = counter(10) \\
>>> print it.next() \\
0 \\
>>> print it.next() \\
1 \\
>>> print it.send(8) \\
8 \\
>>> print it.next() \\
9 \\
>>> print it.next() \\
Traceback (most recent call last): \\
  File "t.py", line 15, in ? \\
    print it.next() \\
StopIteration \\

Because '/ yield '/  will often be returning '' None '', you should always check for this case. Don't just use its value in expressions unless you're sure that the send() method will be the only method used resume your generator function.

In addition to send(), there are two other new methods on generators:

      # throw(type, value=None, traceback=None) is used to raise an exception inside the generator; the exception is raised by the yield expression where the generator's execution is paused.
    
      # close() raises a GeneratorExit exception inside the generator to terminate the iteration. On receiving this exception, the generator's code must either raise GeneratorExit or StopIteration; catching the exception and doing anything else is illegal and will trigger a RuntimeError. close() will also be called by Python's garbage collector when the generator is garbage-collected.

      #If you need to run cleanup code when a GeneratorExit occurs, I suggest using a try: ... finally: suite instead of catching GeneratorExit.

The cumulative effect of these changes is to turn generators from one-way producers of information into both producers and consumers.

Generators also become '' coroutines '', a more generalized form of subroutines. Subroutines are entered at one point and exited at another point (the top of the function, and a return statement), but coroutines can be entered, exited, and resumed at many different points (the yield statements).

==== Built-in functions

Let's look in more detail at built-in functions often used with iterators.

| '_ Built-in function '_  | '_Purpose '_
|// map() //            |  returns a list containing f(iterA[0], iterB[0]), f(iterA[1], iterB[1]) etc
|// filter() //         |  returns a list that contains all the sequence elements that meet a certain condition
|// reduce()   //       | cumulatively performs an operation on all the iterable's elements
|//  enumerate()  //    | counts off the elements in the iterable
|// sorted() //         | sorts the list
|// any() //            | returns True if any element in the iterable is a true value
|// all() //            | returns True if all elements in the iterable is a true value

Two of Python's built-in functions, map() and filter(), are somewhat obsolete; they duplicate the features of list comprehensions but return actual lists instead of iterators.

'/ map(f, iterA, iterB, ...) '/ returns a list containing f(iterA[0], iterB[0]), f(iterA[1], iterB[1]), f(iterA[2], iterB[2]), ....

    >>> def upper(s): \\
    ...     return s.upper() \\

    >>> map(upper, ['sentence', 'fragment']) \\
    ['SENTENCE', 'FRAGMENT'] \\

    >>> [upper(s) for s in ['sentence', 'fragment']] \\
    ['SENTENCE', 'FRAGMENT'] \\

As shown above, you can achieve the same effect with a list comprehension.

'/ filter(predicate, iter) '/ returns a list that contains all the sequence elements that meet a certain condition, and is similarly duplicated by list comprehensions. A predicate is a function that returns the truth value of some condition; for use with '/ filter() '/, the predicate must take a single value.

    >>> def is_even(x): \\
    ...     return (x % 2) == 0 \\

    >>>__ filter(is_even, range(10)) \\
    [0, 2, 4, 6, 8] \\

This can also be written as a list comprehension:

>>> [x for x in range(10) if is_even(x)] \\
[0, 2, 4, 6, 8] \\


'/  reduce(func, iter, [initial_value]) '/ doesn't have a counterpart in the itertools module because it cumulatively performs an operation on all the iterable's elements and therefore can't be applied to infinite iterables. func must be a function that takes two elements and returns a single value. reduce() takes the first two elements A and B returned by the iterator and calculates func(A, B). It then requests the third element, C, calculates // func(func(A, B), C) //, combines this result with the fourth element returned, and continues until the iterable is exhausted. If the iterable returns no values at all, a TypeError exception is raised. If the initial value is supplied, it's used as a starting point and //func(initial_value, A) // is the first calculation.

>>> import operator \\
>>> reduce(operator.concat, ['A', 'BB', 'C']) \\
'ABBC' \\
>>> reduce(operator.concat, []) \\
Traceback (most recent call last): \\
  ... \\
TypeError: reduce() of empty sequence with no initial value \\
>>> reduce(operator.mul, [1,2,3], 1) \\
6 \\
>>> reduce(operator.mul, [], 1) \\
1 \\

If you use operator.add() with reduce(), you'll add up all the elements of the iterable. This case is so common that there's a special built-in called sum() to compute it:

>>> reduce(operator.add, [1,2,3,4], 0) \\
10 \\
>>> sum([1,2,3,4]) \\
10 \\
>>> sum([]) \\
0 \\

'/ enumerate(iter) '/ counts off the elements in the iterable, returning 2-tuples containing the count and each element.

>>> for item in enumerate(['subject', 'verb', 'object']): \\
...     print item \\
(0, 'subject') \\
(1, 'verb') \\
(2, 'object') \\

'/ enumerate() '/ is often used when looping through a list and recording the indexes at which certain conditions are met:

f = open('data.txt', 'r') \\
for i, line in enumerate(f): \\
    if line.strip() == '': \\
        print 'Blank line at line #%i' % i \\

'/ sorted(iterable, [cmp=None], [key=None], [reverse=False]) '/ collects all the elements of the iterable into a list, sorts the list, and returns the sorted result. The cmp, key, and reverse arguments are passed through to the constructed list's .sort() method.

>>> import random \\
>>> # Generate 8 random numbers between [0, 10000) \\
>>> rand_list = random.sample(range(10000), 8) \\
>>> rand_list \\
[769, 7953, 9828, 6431, 8442, 9878, 6213, 2207] \\
>>> sorted(rand_list) \\
[769, 2207, 6213, 6431, 7953, 8442, 9828, 9878] \\
>>> sorted(rand_list, reverse=True) \\
[9878, 9828, 8442, 7953, 6431, 6213, 2207, 769] \\

(For a more detailed discussion of sorting, see the Sorting mini-HOWTO in the Python wiki at  [[ /_ http://wiki.python.org/moin/HowTo/Sorting /_ ]].) 

The '/ any(iter) '/ and '/ all(iter) '/ built-ins look at the truth values of an iterable's contents. any() returns True if any element in the iterable is a true value, and all() returns True if all of the elements are true values:

>>> any([0,1,0]) \\
True \\
>>> any([0,0,0]) \\
False \\
>>> all([0,0,0]) \\
False \\


TODO: Link to itertools and functools

