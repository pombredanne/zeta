@ { 'font-family':'arial,sans-serif', 'font-size':'90%' }


{{ Html( '<style type="text/css">' ) }}
h1, h2, h3, h4, h5 { 
    color : #003366;
    margin : 0px;
    padding: 5px 0px 2px 3px;
    width : 100%;
    border-bottom: 1px solid gray;
}
{{ Html( '</style>' ) }}

{{ Toc( style={ 'font-family' : 'arial,sans-serif' } ) }}

{{Clear()}}

= Language Standards Supported by GCC
For each language compiled by GCC for which there is a standard, GCC attempts to follow one or more versions of that standard, possibly with some exceptions, and possibly with some extensions. 



=== C language
 GCC supports three versions of the C standard, although support for the most recent version is not yet complete. 

The original ANSI C standard (X3.159-1989) was ratified in 1989 and published in 1990. This standard was ratified as an ISO standard (ISO/IEC 9899:1990) later in 1990. There were no technical differences between these publications, although the sections of the ANSI standard were renumbered and became clauses in the ISO standard. This standard, in both its forms, is commonly known as C89, or occasionally as C90, from the dates of ratification. The ANSI standard, but not the ISO standard, also came with a Rationale document. To select this standard in GCC, use one of the options '/ -ansi, -std=c89 or -std=iso9899:1990; '/ to obtain all the diagnostics required by the standard, you should also specify -pedantic (or -pedantic-errors if you want them to be errors rather than warnings). See Options Controlling C Dialect. 

Errors in the 1990 ISO C standard were corrected in two Technical Corrigenda published in 1994 and 1996. GCC does not support the uncorrected version. 

An amendment to the 1990 standard was published in 1995. This amendment added digraphs and __STDC_VERSION__ to the language, but otherwise concerned the library. This amendment is commonly known as AMD1; the amended standard is sometimes known as C94 or C95. To select this standard in GCC, use the option '/ -std=iso9899:199409 '/ (with, as for other standard versions, '/ -pedantic '/ to receive all required diagnostics). 

A new edition of the ISO C standard was published in 1999 as ISO/IEC 9899:1999, and is commonly known as C99. GCC has incomplete support for this standard version; see http://gcc.gnu.org/gcc-4.4/c99status.html for details. To select this standard, use '/ -std=c99 or -std=iso9899:1999. '/ (While in development, drafts of this standard version were referred to as C9X.) 

Errors in the 1999 ISO C standard were corrected in three Technical Corrigenda published in 2001, 2004 and 2007. GCC does not support the uncorrected version. 

By default, GCC provides some extensions to the C language that on rare occasions conflict with the C standard. See Extensions to the C Language Family. Use of the -std options listed above will disable these extensions where they conflict with the C standard version selected. You may also select an extended version of the C language explicitly with '/ -std=gnu89 '/ (for C89 with GNU extensions) or '/ -std=gnu99 '/ (for C99 with GNU extensions). The default, if no C language dialect options are given, is '/ -std=gnu89 '/; this will change to '/ -std=gnu99 '/ in some future release when the C99 support is complete. Some features that are part of the C99 standard are accepted as extensions in C89 mode. 

The ISO C standard defines (in clause 4) two classes of conforming implementation. A conforming hosted implementation supports the whole standard including all the library facilities; a conforming freestanding implementation is only required to provide certain library facilities: those in '' <float.h> '','' <limits.h>'', ''  <stdarg.h> '', and '' <stddef.h> ''; since AMD1, also those in '' <iso646.h> ''; and in C99, also those in '' <stdbool.h> '' and '' <stdint.h> ''. In addition, complex types, added in C99, are not required for freestanding implementations. The standard also defines two environments for programs, a freestanding environment, required of all implementations and which may not have library facilities beyond those required of freestanding implementations, where the handling of program startup and termination are implementation-defined, and a hosted environment, which is not required, in which all the library facilities are provided and startup is through a function // int main (void) // or // int main (int, char *[]) //. An OS kernel would be a freestanding environment; a program using the facilities of an operating system would normally be in a hosted implementation. 

GCC aims towards being usable as a conforming freestanding implementation, or as the compiler for a conforming hosted implementation. By default, it will act as the compiler for a hosted implementation, defining __STDC_HOSTED__ as 1 and presuming that when the names of ISO C functions are used, they have the semantics defined in the standard. To make it act as a conforming freestanding implementation for a freestanding environment, use the option -ffreestanding; it will then define _STDC_HOSTED_ to 0 and not make assumptions about the meanings of function names from the standard library, with exceptions noted below. To build an OS kernel, you may well still need to make your own arrangements for linking and startup. See __ Options Controlling C Dialect __. 

GCC does not provide the library facilities required only of hosted implementations, nor yet all the facilities required by C99 of freestanding implementations; to use the facilities of a hosted environment, you will need to find them elsewhere (for example, in the GNU C library). See __ Standard Libraries __. 
Most of the compiler support routines used by GCC are present in libgcc, but there are a few exceptions. GCC requires the freestanding environment provide '/ memcpy, memmove, memset '/ and '/ memcmp '/. Finally, if ~__builtin_trap is used, and the target does not implement the trap pattern, then GCC will emit a call to abort. 

For references to Technical Corrigenda, Rationale documents and information concerning the history of C that is available online, see http://gcc.gnu.org/readings.html 

=== C++ language
GCC supports the ISO C++ standard (1998) and contains experimental support for the upcoming ISO C++ standard (200x). 

The original ISO C++ standard was published as the ISO standard (ISO/IEC 14882:1998) and amended by a Technical Corrigenda published in 2003 (ISO/IEC 14882:2003). These standards are referred to as C++98 and C++03, respectively. GCC implements the majority of C++98 (export is a notable exception) and most of the changes in C++03. To select this standard in GCC, use one of the options '/ -ansi '/ or '/ -std=c++98 '/; to obtain all the diagnostics required by the standard, you should also specify '/ -pedantic '/ (or '/ -pedantic-errors '/ if you want them to be errors rather than warnings). 

The ISO C++ committee is working on a new ISO C++ standard, dubbed C++0x, that is intended to be published by 2009. C++0x contains several changes to the C++ language, some of which have been implemented in an experimental C++0x mode in GCC. The C++0x mode in GCC tracks the draft working paper for the C++0x standard; the latest working paper is available on the ISO C++ committee's web site at http://www.open-std.org/jtc1/sc22/wg21/. For information regarding the C++0x features available in the experimental C++0x mode, see http://gcc.gnu.org/gcc-4.3/cxx0x_status.html. To select this standard in GCC, use the option -std=c++0x; to obtain all the diagnostics required by the standard, you should also specify -pedantic (or -pedantic-errors if you want them to be errors rather than warnings). 

By default, GCC provides some extensions to the C++ language; See __Options Controlling C++ Dialect __. Use of the -std option listed above will disable these extensions. You may also select an extended version of the C++ language explicitly with '/ -std=gnu++98 '/ (for C++98 with GNU extensions) or '/ -std=gnu++0x '/ (for C++0x with GNU extensions). The default, if no C++ language dialect options are given, is -std=gnu++98. 

=== Objective-C and Objective-C++ languages
 There is no formal written standard for Objective-C or Objective-C++. The most authoritative manual is "Object-Oriented Programming and the Objective-C Language", available at a number of web sites: 

http://developer.apple.com/documentation/Cocoa/Conceptual/ObjectiveC/ is a recent (and periodically updated) version; 
http://www.toodarkpark.org/computers/objc/ is an older example; 
http://www.gnustep.org and http://gcc.gnu.org/readings.html have additional useful information. 

